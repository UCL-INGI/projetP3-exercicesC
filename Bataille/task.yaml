accessible: true
author: Hippolyte Hilgers Anthony Doeraene
categories: []
contact_url: ''
context: |-
    .. role::c(code)
        :language:c

    Vous devez écrire 2 fonctions qui simuleront le jeu de carte  `Bataille <https://fr.wikipedia.org/wiki/Bataille_%28jeu%29>`_.

    Les mains des joueurs sont représentées avec des `queues <https://en.wikipedia.org/wiki/Queue>`_ dont le code initial vous est donné.

    Vous avez accès aux structures :

        - :c:`card_t (int value, card_t* next)` : la structure qui représentera une carte
        - :c:`deck_t (int id_player, int size, card_t* tail, card_t* head)` : la structure qui représentera la main entière d'un joueur (tail = la carte en dessous de son paquet) (head = la carte tout au dessus)

    Vous avez accès aux fonctions :

        - :c:`void print_deck(deck_t* deck)` : affiche le deck du joueur ainsi que les informations le concernant.
        - :c:`int addCard(deck_t* d, int val)` : l'équivalent de la fonction "enqueue" : ajoute une carte de valeur val en dessous du deck d (-1 en cas d'erreur) (0 si réussi).
        - :c:`int drawCard(deck_t* d)` : l'équivalent de la fonction "dequeue" : pioche la carte au dessus du deck d et retourne la valeur de la carte piochée, ou -1 si le deck est vide.
        - :c:`deck_t* createDeck(int id, int* cardsData, int nCards)` : crée un deck (structure deck_t) et le remplit avec les cartes correspondantes aux valeurs (dans l'ordre) du tableau cardsData (pointeur vers le tableau);

    Précisions:

    - Il faudra bien faire attention à l'ordre dans lequel les cartes sont ajoutées au deck du joueur gagnant.

    - Ici l'ordre a été défini compte tenu de l'ordre dans lesquelles les cartes sont ajoutées sur la table.

    - Le premier joueur (dans l'ordre dans la mémoire, pas l'id du joueur) joue avant le second, etc.

    - En cas d'égalité entre 2 joueurs, le premier joue 2 cartes d'affilée avant que le suivant joue aussi 2 cartes d'un seul coup.
environment_id: cpp
environment_parameters:
    limits:
        time: '30'
        hard_time: ''
        memory: '100'
    run_cmd: ''
environment_type: docker
evaluate: best
file: ''
groups: false
input_random: 0
name: Bataille
network_grading: false
problems:
    simulateOneRound:
        type: code
        name: Simulation de tours
        header: |-
            La fonction simulateOneRound simule 1 tour et modifie les decks des joueurs, ne renvoie rien.

                .. code-block:: c

                    /*
                     * @pre playersDeck != NULL, manyPlayers > 0
                     * @post simule un tour du jeu bataille en modifiant les decks des joueurs
                     */
                    void simulateOneRound(deck_t** playersDeck, int manyPlayers);
        language: c
        default: ''
    guessWhoWin:
        type: code
        name: Le dernier debout
        header: |-
            La fonction guessWhoWins simule au maximum n tours, et si un joueur a toutes les cartes du jeu dans son deck, il a gagné et le jeu s'arrête, la fonction renvoie l'id de ce joueur.

                .. code-block:: c

                    /*
                     * @pre playersDeck != NULL, manyPlayers > 0, maxRounds > 0
                     * @post retourne l'id du joueur gagnant, ou -1 si la partie n'est pas terminée
                     */
                    int guessWhoWins(deck_t **playersDeck, int manyPlayers, int maxRounds);
        language: c
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
