accessible: true
author: Jérôme Mayolet Anthony Doeraene
categories: []
contact_url: ''
context: |
    .. role:: c(code)
        :language: c

    Using the structure :c:`node` described as below :

        .. code-block:: c

            struct node {
                struct node *left, *right;
                int value;
            };

    Here's an exemple of a tree generated by this structure:

    .. image:: https://inginious.org/admin/uclouvain-lepl1503/edit/task/Binary_search_tree/files?action=download&path=/student/arbre.JPG
        :height: 150px
        :align: center

    You have to create a tree by calling the function :c:`add` repetitively. The function
    :c:`search` must check efficiently if the tree contains a certain value.

    We will use a binary ordered tree, with all nodes at right having their :c:`value` greater the the value of root node, and the nodes at left will have their :c:`value` less tan the one of root node. If a value is already contained in the tree, you shouldn't add any new node.

    *Example of the behaviour when calling add:*

    .. image:: https://inginious.org/admin/uclouvain-lepl1503/edit/task/Binary_search_tree/files?action=download&path=/student/sequence%20ajout.JPG
        :width: 100%
environment_id: cpp
environment_parameters:
    limits:
        time: '30'
        hard_time: ''
        memory: '100'
    run_cmd: ''
environment_type: docker
evaluate: best
file: ''
groups: false
input_random: 0
name: Binary Search Tree
network_grading: false
problems:
    search:
        type: code
        name: Search
        header: |
            Write the function to search efficiently a value in a tree

                .. code-block:: c

                    /**
                    * This function check if "value" is contained in the tree
                    * @param root  : the root node of the tree (perhaps NULL)
                    * @param value : the value to search in the tree
                    * @return 1 if "value" is in the tree , 0 otherwise
                    */
                    int search(struct node *root, int value);
        language: c
        default: ''
    add:
        type: code
        name: Add
        header: |-
            Write the function to insert correctly a value to the tree

                .. code-block:: c

                    /**
                    * This function add a node with a value of "value" in the tree.
                    * If this value is already contained in the tree, nothing is done.
                    *
                    * @param root the root of the tree (perhaps NULL)
                    * @param value the value to insert in the tree
                    * @return root of the tree
                    *         NULL if malloc fails
                    */
                    struct node *add(struct node *root, int value);
        language: c
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
